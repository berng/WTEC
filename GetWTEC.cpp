#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#ifdef WINDOWS
# include <dir.h>
#endif

#include <dirent.h>

#ifndef WINDOWS
# include <sys/stat.h>
# include <sys/types.h>
 int makedir(const char* dirname)
  { return mkdir(dirname,S_IRUSR|S_IWUSR|S_IXUSR); }
#define DIRSEP	"/"
#define DIRSEPCHAR	'/'
#else
 int makedir(const char* dirname)
  { return mkdir(dirname); }
#define DIRSEP	"\\"
#define DIRSEPCHAR	'\\'
#endif

#define AATR 0

#define MAX_DATA_SIZE 1440
#define MIN_ELEVATION 5.0
#define MAS_SIZE 2880


#ifdef WINDOWS
# if AATR
#  define STRING_SIZE 47
# else
#  define STRING_SIZE 32
# endif
/// berng
#else
# if AATR
#  define STRING_SIZE 46
# else
#  define STRING_SIZE 31
# endif

#endif

typedef struct {
   char site[5];
   float cutoff;
} Site_Info;

typedef struct {
   float gamma;
   float az;
   float tec;
   float coswin;
#if AATR
   float aatr2;
#endif
} PrnData;

int NumOfSites;
Site_Info *SiteInfo;

int Interval = 30;
char *Sites[3000];
float max_dI, max_d2I, P_dI, P_d2I, percent = 99.92;

#include "SortMass.h"
//---------------------------------------------------------------------------

void Error(char* errorstr)
{
   fprintf(stderr,"Error:%s\n",errorstr);
   exit(1);
}

int WeightAvRMS(float In[], float S[], int Index[], int N, float *aver, float *rms);
int RangeAvRMS(float X[], float Y[], int Index[], int N, float *X_av, float *Y_av, float *DR);
int GetListOfSites(char []);
int ReadDat30sec(char *way2dat, float gamma[], float az[], float tec[],
               float *silat, float *silon, float LatRange[], float LonRange[]);
int GetListOfParams(char buf[], int start, int poryadok[][4], int M);

int ScanBuf(char buf[], int poryadok[][4], int* secn, float* el, float* az,
            double* tec, int max_index);

int GetPrnData(int NumOfBlock, PrnData **Dat, int *list_prns, int Nprns,
               char *statway);

int readdia(char* waydia, char* datway, int* crit_all, char* site,
            int* year, int* daybeg, int* dayend, float* hmax, float* highper,
            float* gamcutoff, int* prncutoff, int* GNSS_crit, int* GrossDir,
            int *NofDirs);

int smooth(int, float [], int);
int trelin(int, float [], int);
int mkprndat(char [], char [], float*, float*, int, int, int);
int filtprndat(char *statout, int highcount, int nprn, float hmax,
               int type, int model_id, float gamcutoff, int PolynomTrend,
               float d2I_cutoff);

void PPCoord(float silat, float silon, float el, float az, float hmax,
             float* X, float* Y);
float CalcTECconst(float [], float [], float, int);
int GetSiteInfo();
int DerivaStat(char *statout, int *list_prns, int Nprns, char *site, int year);

//---------------------------------------------------------------------------

int main()
{
   FILE *fout[5], *ftmp;
   PrnData **Dat;
   char *p, *p1, *p2, sprn[4], site[5];
   char buf[256], statin[256], wayin[256], statout[10] = "out"DIRSEP, wayout[256],
        stmp[10], waydia[] = "GetWTEC.dia", generalout[256], datway[256],
        *ftypes[5] = {"F","XXX","XXX","XXX","XXX"};
   float gamma[200], az[200], tecint[200], coswin[200], gammaext, gamcutoff,
         tecaver, tecrms, S, gam_curporog, d2I_cutoff, gamma_dist[200];
#if AATR
   float aatr2[200], Wtec_sum, rms_AATR, Wtec_hour;
   double AATR_sum;
   int Naatr;
#endif
   float silat, silon;
   float X[200], Y[200], Xaver, Yaver, Raver, DR, hmax;
   float Hmax_av, I0_av, DHmax, DI0;
   float highper, startDir, endDir;
   int prns[200], list_prns[200], Nprns, NumOfBlock, index, ColOfNulDays,
       prnday[200], Index[200], GNSS_crit, GrossDir, critDir,
       M, model_id;
   int i, j, k, l, N, nprn, jext, day, year, daybeg, dayend, N_files,
       type, crit_all, highcount, last, nsites, isite, PolynomTrend,
       NofDirs, DirStep, prncutoff, Nvalidprns, sec_total;
   DIR *dir;
   struct dirent *fdat_ent;

   makedir("out");
   makedir("genout");

   if (!readdia(waydia,datway,&crit_all,site,&year,&daybeg,&dayend,
                &hmax,&highper,&gamcutoff,&prncutoff,&GNSS_crit,&GrossDir,
                &NofDirs))
   {
      Error("readdia error\n");
   }

  // ??????? ?????? ?????????
   if (GrossDir == 999 || NofDirs < 2)
   {
      N_files = 1;
   }
   else
   {
      if (NofDirs > 4) NofDirs = 4;
      N_files = NofDirs + 1;  // ???-?? ???????? ?????? (????? + ?? ????????????)
     // ?????? ??????????? ? ??????? ?????? ?? ????????????
     // 1) ???????? ??? ?? ???????????
      DirStep = 360/NofDirs;
     // 2) ???????? ??????????? "???????? ?????" ? ??????? ?? 0 ?? DirStep
      if (GrossDir < 0) GrossDir += 360;
      while (GrossDir >= DirStep)
         GrossDir -= DirStep;
     // 3) ?????? ?????????? ????????? ? ????? ?????? ???????? ????????????
      for (i=0; i<NofDirs; i++)
         sprintf(ftypes[i+1],"%03d",GrossDir+DirStep*i);
   }

// ????? ???????? ?????? ?? ?????? ??????????? ??? ?? ????? siteinfo.dat
   NumOfSites = GetSiteInfo();

// ?????? ???????? ?? ??????????? ???????? ??????? - ???? ????? ++++++++++++++
   if (crit_all) {
      sprintf(buf,"%s%04d"DIRSEP"%03d"DIRSEP,datway,year,daybeg);
      nsites = GetListOfSites(buf);
   }
   isite = 0;

   NEXTSITE:

   isite++;
   if (crit_all) {
      if (isite <= nsites)
         sprintf(site,"%s",Sites[isite-1]);
      else
         goto END_OF_SITES; // ????? ?? ????? ???????? ???????
   }

   d2I_cutoff = 0.;
   for (i=0; i<NumOfSites; i++) {
      if (!strcmp(site,SiteInfo[i].site)) {
         d2I_cutoff = SiteInfo[i].cutoff;
         break;
      }
   }
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

   for (i=0; i<200; prnday[i]=daybeg-1, prns[i++]=0);

// ??????? ?????????? ????? ?? ?????????
   for (nprn=1; nprn<=199; nprn++) {
      sprintf(wayout,"%s%03d.dat",statout,nprn);
      remove(wayout);
   }

   max_dI = 0.;
   max_d2I = 0.;
   last = 0;  // ???????? ?????????? ???

   for (day = daybeg; day <= dayend; day++) // ??????? ????
   {
      if (day == dayend) // ???????? ?????????? ???
         last = 1;
      printf("day %03d processing\n",day);
      sprintf(statin,"%s%04d"DIRSEP"%03d"DIRSEP"%4s"DIRSEP,datway,year,day,site);

      p = buf + 5;
      p1 = buf + 15;
      p2 = sprn + 1;

      if ((dir = opendir(statin)) == NULL)
         Error("Unable to open directory");
      while ((fdat_ent = readdir(dir)) != NULL)
      {
         strcpy(buf,fdat_ent->d_name);
         if (strlen(buf) != 19 || strcmp(p1,".dat") != 0)
            continue;
         strcpy(wayin,statin);
         strcat(wayin,buf); // ???? ? dat-?????
      // ??????? ? 6-? ??????? ????? 3 ???????,
         strncpy(sprn,p,3);           // 1-? ?????? - ??????? ???????
         sprn[3] = '\0';              // '_' ? 'G' - GPS, 'R' - ???????; 2 ? 3 ??????? - ????? ????????
         if (sprn[0] == '_') sprn[0] = 'G'; // '_' ???????? ?? 'G' - GPS
      // ??????? ????? ???????? ? ???????? ????????
         sscanf(p2,"%d",&nprn);
         if (sprn[0] == 'R')
            nprn += 100;  // ?? 0 ?? 99 - ???????? GPS, ?? 100 ? ???? - ???????

         if (!GNSS_crit || (GNSS_crit == 1 && nprn < 100)
                        || (GNSS_crit == 2 && nprn > 100)) {

         // ???? ????? ??????? ?????????? ??????? ? ??????? ???? ?? ??????
            ColOfNulDays = 0;
            if (day != prnday[nprn]+1) {
               ColOfNulDays = day - prnday[nprn] - 1;
            }
            prnday[nprn] = day;

         // ????????? ???????? ????
            sprintf(wayout,"%s%03d.dat",statout,nprn);
         // ??????? ????? ??? ?????? ????????? ????????? dat-?????? ? ??????
         // ????????????? ?????????? ?????? ?? ?????????
            j = mkprndat(wayin,wayout,&silat,&silon,nprn,ColOfNulDays,last);
            prns[nprn] = 1;

            switch (j) {
               case 1: // mkprndat ????????? ?????????
                  break;
               case -1: // ???????? ? ??????? dat-??????
//                  printf("Problems with %s\n",wayin);
                  break;
               case 0:  // ?? ?????????? ????????? ??????? dat-????
//                  printf("Can't read %s\n",wayin);
                  break;
               default:
                  Error("Unexpected return code of mkprndat\n");
            }
         }
      }
      if (closedir(dir) != 0)
         Error("Unable to close directory");
   }    // ????? ???????? ????

   Nprns = 0;

   for (nprn=1; nprn<=199; nprn++) {
      if (prns[nprn] == 1) {
         list_prns[Nprns++] = nprn;
         // ???? ????? ??????? ???, ?? ?? ?????????? ??? "?? ???????"
         if (prnday[nprn] != dayend) {
            ColOfNulDays = dayend - prnday[nprn] - 1;
            sprintf(wayin,"null.dat");
            sprintf(wayout,"%s%03d.dat",statout,nprn);
            last = 1;
            mkprndat(wayin,wayout,&silat,&silon,nprn,ColOfNulDays,last);
         }
      }
   }

   if (d2I_cutoff < 0.001)
   {
//      d2I_cutoff = 18.; // ????????
      DerivaStat(statout,list_prns,Nprns,site,year);
      d2I_cutoff = P_d2I;
   }
// ?????????? ??????
   highcount = (int)(highper*2.)*30/Interval;
   N = 2880*(dayend-daybeg+1)*30/Interval;

   for (i=0; i<Nprns; i++) {
      printf("Filtering of prn%03d data\n",list_prns[i]);
      filtprndat(statout,highcount,list_prns[i],hmax,type,model_id,
                 gamcutoff,PolynomTrend,d2I_cutoff);
   }

// ????????? ??????
   Dat = (PrnData **)calloc(Nprns, sizeof(PrnData*));
   if(!Dat)
      Error("main: Can not allocate memory\n");
   for (i = 0; i < Nprns; i++)
   {
      Dat[i] = (PrnData *)calloc(MAS_SIZE, sizeof(PrnData));
      if(!Dat[i])
         Error("main: Can not allocate memory\n");
   }

#if AATR
   sprintf(generalout,"genout"DIRSEP"%04d"DIRSEP,year);
   makedir(generalout);
   sprintf(generalout,"genout"DIRSEP"%04d"DIRSEP"%4s%03d_%03d_%04d_aatr_%2dmin.dat",
                          year,site,daybeg,dayend,year,(int)highper);
   fout[0] = fopen(generalout,"wt");
   fputs("time_ut, wtec_hour, rms_aatr\n",fout[0]);

   Naatr = 0;
   AATR_sum = 0.;
   Wtec_sum = 0.;
   for (i=0; i<N; i++)
   {
      if (i % MAS_SIZE == 0) { // ???? ????????? ??????
         NumOfBlock = i/MAS_SIZE;
         GetPrnData(NumOfBlock,Dat,list_prns,Nprns,statout);
         printf("Processing of block %d\n",NumOfBlock);
         index = -1;
      }
      index++;

     // ??????? ?????? ?? ??????? ?????? ??????? ?? ?????????
      for (j = 0; j < Nprns; j++)  // ??????? ?????????
      {
         gamma[j] = Dat[j][index].gamma;
         tecint[j] = Dat[j][index].tec;
         coswin[j] = Dat[j][index].coswin;
         aatr2[j] = Dat[j][index].aatr2;
      }
     // ???????? ?????? ????????-?????????, ?????????? ??? ???????? ???????
      for (l = 0, j = 0; j < Nprns; j++)  // ??????? ?????????
         if (gamma[j] > gamcutoff)
            Index[l++] = j;
      M = l;
     // ?????? Wtec ? ?.?.?.
      WeightAvRMS(tecint,coswin,Index,M,&tecaver,&tecrms);

     // ???? ??????? ?????? ??? ?????????
      if ((i &&(i % 120 == 0)) || i == N-1) {
         if (Naatr) {
            rms_AATR = sqrt(AATR_sum/Naatr);
            Wtec_hour = Wtec_sum/120.;
         }
         else {
            rms_AATR = 0.;
            Wtec_hour = 0.;
         }
        // ????? ? ????
         fprintf(fout[0],"%6.1f %12.8f %12.8f\n",
                (float)i/120.,Wtec_hour,rms_AATR);
         Naatr = 0;
         AATR_sum = 0.;
         Wtec_sum = 0.;

      }
      for (j=0; j<M; j++) {
         AATR_sum += (double)aatr2[Index[j]];
      }
      Wtec_sum += tecaver;
      Naatr += M;

   }

// ??????? ??????
   for (i = 0; i < Nprns; i++)
      free(Dat[i]);
   free(Dat);


   fclose(fout[0]);
#else
// ????????? ????? ???????????? ???????? ??????, ??????? ?? ? ?????????? ? ??? "?????"
   for (i = 0; i < N_files; i++) {
      sprintf(generalout,"genout"DIRSEP"%04d"DIRSEP,year);
      makedir(generalout);
      sprintf(generalout,"genout"DIRSEP"%04d"DIRSEP"%4s%03d_%03d_%04d%s_%2dmin.dat",
                                year,site,daybeg,dayend,year,ftypes[i],(int)highper);
      printf("Creating of %s...\n",generalout);

      fout[i] = fopen(generalout,"wt");

      fprintf(fout[i],"%3.0f\t- height of F2-layer maximum\n",hmax);
      fprintf(fout[i],"%3.0f\t- high filtering period, minutes\n",highper);
      fprintf(fout[i],"%3.0f\t- elevation cutoff\n",gamcutoff);
      fprintf(fout[i],"%1d\t =0 - GPS/GLONASS, =1 - GPS, =2 - GLONASS\n",GNSS_crit);
      fprintf(fout[i],"%3d\t- main direction\n",GrossDir);
      fprintf(fout[i],"%3d\t- number of directions\n",NofDirs);
      fprintf(fout[i],"Wtec - Wtec index\n");
      fprintf(fout[i],"rms_Wtec - root mean square of TEC averaging\n");
      fprintf(fout[i],"Xaver, Yaver - average position of Ionospheric Pierce Point (km)\n");
      fprintf(fout[i],"N_of_Sats - number of satellites\n");

      fprintf(fout[i],"\ntime_ut, Wtec, rms_Wtec, Xaver, Yaver, N_of_Sats\n");
   }

   for (i=0; i<N; i++)
   {
      if (i % MAS_SIZE == 0) { // ???? ????????? ??????
         NumOfBlock = i/MAS_SIZE;
         GetPrnData(NumOfBlock,Dat,list_prns,Nprns,statout);
         printf("Processing of block %d\n",NumOfBlock);
         index = -1;
      }
      index++;
     // ??????? ?????? ?? ??????? ?????? ??????? ?? ?????????
      Nvalidprns = 0;
      for (j = 0; j < Nprns; j++)  // ??????? ?????????
      {
         gamma[j] = Dat[j][index].gamma;

         if (gamma[j] > gamcutoff)
            gamma_dist[Nvalidprns++] = gamma[j];

         az[j] = Dat[j][index].az;
         if (az[j] < 0.) az[j] += 360.; // ???????? ?????? ? ????????? 0..360
         tecint[j] = Dat[j][index].tec;
         coswin[j] = Dat[j][index].coswin;
         PPCoord(silat, silon, gamma[j], az[j], hmax, &X[j], &Y[j]);
      }
     // ???? ????????? ????? ????? ??? ?????? ????? ?????? ????? ?????
     // ?? ???? ????? - ????? ????????? ?????? prncutoff ?????????
      if (Nvalidprns > prncutoff)
      {
        // ?????????? ??????? ????? ?????
         merge_sort(gamma_dist,0,Nvalidprns-1);
        // ??????? ?????
         gam_curporog = gamma_dist[Nvalidprns - prncutoff - 1];
      }
      else
         gam_curporog = gamcutoff;
     // ??????? ?????? ?? ????????????
      for (k = 0; k < N_files; k++)
      {
        // ?????????? ??????? ??????? ????????? ???????
         if (!k) // ??? ?????? ????? ?? ???? ????????????
         {
           // ??? ?????? ????? ?? ????????? ??? ????-???????????
           // ????? ?? ???? ?????
            startDir = 0.;
            endDir = 360.;
            critDir = 1;
         }
         else
         {      // ??? ?????? ???????????
           // ? ??? ?????? ?? ???????????? - ?????? ???????? ????? ?? ????
           // ?????, ??????? ?? ????? ?? ??????????? ?????
            gam_curporog = gamcutoff;
            startDir = (float)(GrossDir + (k-1)*DirStep) - (float)DirStep/2.;
            endDir = (float)(GrossDir + (k-1)*DirStep) + (float)DirStep/2.;
            if (startDir < 0.) startDir += 360.;
            if (endDir > 360.) endDir -= 360.;
            if (endDir > startDir)
               critDir = 1; // ???? ?????????? ???????? ????????
            else
               critDir = 0; // ???? ?????????? ???????? ????????
         }

        // ???????? ?????? ????????-?????????, ?????????? ??? ???????? ???????
         for (l = 0, j = 0; j < Nprns; j++)  // ??????? ?????????
         {
            if (gamma[j] > gam_curporog)
            {
               if ((critDir && (az[j] >= startDir && az[j] < endDir)) ||
                   (!critDir && (az[j] >= startDir || az[j] < endDir)))
               {
                  Index[l++] = j;
               }
            }
         }
         M = l;

        // ?????? ??????? ? ?.?.?.
         WeightAvRMS(tecint,coswin,Index,M,&tecaver,&tecrms);
         RangeAvRMS(X,Y,Index,M,&Xaver,&Yaver,&DR);
        // ????? ? ????
         fprintf(fout[k],"%9.4f %8.4f %8.4f %8.3f %8.3f %2d\n",
                (float)i/120.,tecaver,tecrms,Xaver,Yaver,M);
      }
   }


   for (i = 0; i < N_files; i++)
      fclose(fout[i]); // ????????? ???????????? ???????? ?????
#endif

// ???????? ?? ??????????? ???????? ??????? - ???? ????? ++++++++++++++
   if (crit_all)
      goto NEXTSITE;
   END_OF_SITES:

// ??????? ??????
   if (crit_all) {
      for (i = 0; i < nsites; i++)
         free(Sites[i]);
   }
   free(SiteInfo);

   return 1;
}
//---------------------------------------------------------------------------
int mkprndat(char *wayin, char *wayout, float *silat, float *silon,
             int nprn, int ColOfNulDays, int last)
{
   FILE *fout;
   char buf[120];
   float gamma[2880], az[2880], tec[2880];
   float dIdt, d2Idt2, dGamdt;  // tmp
   float teclast[2], gamlast[2], azlast[2],
         raznostlast, raznostcur, raznost, tec0;
   float LatRange[2] = {-90.,90.}, LonRange[2] = {0.,360.};
   int i, j, n;

   if (ColOfNulDays > 0) {
      fout = fopen(wayout,"at+");
      n = ColOfNulDays*MAS_SIZE*30/Interval;
      for (j = 0; j < n; j++)
         fprintf(fout,"%6.3f %8.3f %9.3f %9.6f %12.9f\n",0.,0.,0.,0.,0.);
//         fprintf(fout,formatout,0.0,0.0,0.0);
      fclose(fout);
   }

// ????????? dat-????, ??????? ???????? ?????????? 0-??
   j = ReadDat30sec(wayin, gamma, az, tec, silat, silon, LatRange, LonRange);

// ???? ?? ??????? ??????? ???? - ????????? ???? ???? 0-??
   if (j != 1) {
      fout = fopen(wayout,"at+");
      for (j = 0; j < 2880; j++)
         fprintf(fout,"%6.3f %8.3f %9.3f %9.6f %12.9f\n",0.,0.,0.,0.,0.);
      // ?????, ???? ????? ???? ?????? ???????
      if (last)
         fprintf(fout,"%6.3f %8.3f %9.3f %9.6f %12.9f\n",0.,0.,0.,0.,0.);

      fclose(fout);

      if (!j)
         return 0;
      else {
         // ???? ???? ???????? ? ?????? - ?? ????? ? "??????"
//         printf("Return code of ReadDat30sec is %d\n",j);
         return -1;
      }
   }

   if (gamma[0] > 0.0001)  // ???? ?????? ?????? ?? ??????? - ?.?. ???? ?????? ?
   {                  // ?????????? ???? - ???? ???????????
     // ????????, ?????????? ?? ???? ?????????? ????
      if ((fout = fopen(wayout,"rt")) != NULL) {
        // ??????? 2 ????????? ?????? ?? ??????????? ?????-"????????"

#ifdef WINDOWS
         fseek(fout,-100,SEEK_END); // -2 ?????? ?? 50 ???? ?? ????? ?????
#else
         fseek(fout,-98,SEEK_END); // -2 ?????? ?? 50 ???? ?? ????? ?????
#endif
         for (i=0; i<2; i++) {
            fgets(buf,119,fout);
            sscanf(buf,"%f %f %f",&gamlast[i],&azlast[i],&teclast[i]);
         }
         fclose(fout);

         if (gamlast[1] > 0.0001) { // ???? ? ?????????? ???? ???? ??????
            if ((gamlast[0] > 0.0001) && (gamma[1] > 0.0001)) { // ???? ??? ?????? ????
               raznostlast = teclast[1] - teclast[0];
               raznostcur = tec[1] - tec[0];
               raznost = (raznostlast + raznostcur) / 2.;
            }
           // ???? ?? ??????? ??????
            if ((gamlast[0] > 0.0001) && (gamma[1] < 0.0001)) { // ? ??????? ???
               raznostlast = teclast[1] - teclast[0];
               raznost = raznostlast;
            }
            if ((gamlast[0] < 0.0001) && (gamma[1] > 0.0001)) { // ??? ? ??????????
               raznostcur = tec[1] - tec[0];
               raznost = raznostcur;
            }
            tec0 = tec[0] - teclast[1] - raznost;

            i = -1;
            while (gamma[++i] > 0.0001) // ???? ???? ??????????? ??? ?? ?????? ???
               tec[i] -= tec0;
         }
      }
   }

// ???????? 0-?? ????????? ???
   for (i = 1; i < 2880; i++)
   {
      dIdt = 0.;
      // ???? ?? ?????? ?? ?????? ?????? ? ??????????? ???? ???
      if ((gamma[i-1] > 0.0001) && (gamma[i] > 0.0001))
      {
         if (fabs(tec[i] - tec[i-1]) > 8.)  // ???? ????????? > 16 TECU ? ??????

         {
            gamma[i] = 0.;                  // ??????? ??????? ??????
            az[i] = 0.;
            tec[i] = 0.;
         }
      }
   }

   fout = fopen(wayout,"at+");
   for (j = 0; j < 2880; j++) {

      dIdt = 0.;
      d2Idt2 = 0.;
      // ???? ?? ?????? ?? ?????? ?????? ? ??????????? ???? ???
      if (j && (gamma[j-1] > 0.0001) && (gamma[j] > 0.0001) && (gamma[j+1] > 0.0001))
      {
        // ?????? ??????????? ??? ?? ??????? (TECU/???)
         dIdt = fabs(tec[j] - tec[j-1])*2.;
        // ?????? ?????? ??????????? ??? ?? ??????? (TECU/???^2)
         if (j == 2879) {
            if (gamma[j-2] > 0.0001)
               d2Idt2 = fabs(tec[j] + tec[j-2] - 2.*tec[j-1])*4.;
            else
               d2Idt2 = 0.;
         }
         else
            d2Idt2 = fabs(tec[j+1] + tec[j-1] - 2.*tec[j])*4.;

        // ???????? ?? ??????????? - ????? ? ?????? ????? ?????????
         if (dIdt > 99.) dIdt = 99.;
         if (d2Idt2 > 99.) d2Idt2 = 99.;

        // ??????????? ???????????? ???????? ???????????
         if (dIdt > max_dI)
            max_dI = dIdt;
         if (d2Idt2 > max_d2I)
            max_d2I = d2Idt2;

         dGamdt = fabs(gamma[j] - gamma[j-1])*2.;
// ????? ?? ??????????? ???? ?????
         if (dGamdt > 0.8) {
            gamma[j] = az[j] = tec[j] = 0.;
         }
      }
      sprintf(buf,"%6.3f %8.3f %9.3f %9.6f %12.9f\n",gamma[j],az[j],tec[j],dIdt,d2Idt2);

      fputs(buf,fout);
   }
   if (last) {
      sprintf(buf,"%6.3f %8.3f %9.3f %9.6f %12.9f\n",0.,0.,0.,0.,0.);
      fputs(buf,fout);
   }
   fclose(fout);

   return 1;
}
//---------------------------------------------------------------------------
int filtprndat(char *statout, int highcount, int nprn, float hmax,
               int type, int model_id, float gamcutoff, int PolynomTrend,
               float d2I_cutoff)
{
   FILE *fin, *fout;
   char wayin[40], wayout[40], buf[100];
   double sinfi, fi0, phi, rz = 6371.;
   float gamma[1440], az[1440], tec[1440], trend[1440], coswin[1440],
         g, a, t, dI, d2I, *Moment;
#if AATR
   float aatr2[1440], tecprev;
#endif
   float I, tecmin;
   int i, j, mas, minmas, i_sec30, sec30, curday, model_dimension, modplus;

   minmas = 2*highcount;
   sprintf(wayin,"%s%03d.dat",statout,nprn);
   sprintf(wayout,"%s%03d_filt.dat",statout,nprn);

   fin = fopen(wayin,"rt");
   fout = fopen(wayout,"wt");

   i_sec30 = -1;
   mas = 0;      // ?????? ????
   while (fgets(buf,99,fin) != NULL)
   {
      i_sec30++;
      sscanf(buf,"%f %f %f %f %f",&g,&a,&t,&dI,&d2I);

// ???? ???????? ???? ????? ???? ?????????? ? ?????? ??????????? ??? ?????? ??????
// !!!!!!!!!!!!!!!!!!!!! ?????? ??????? - ????? ??? ??????? TORB ?? 2015 ???
//      P_d2I = 17.628389;
// !!!!!!!!!!!!!!!!!!!!! ?????? ???????
      if (g >= gamcutoff && d2I < d2I_cutoff)
      {                         // ????? ???
         tec[mas] = t;
         gamma[mas] = g;
         az[mas] = a;
         mas++;
      }
      else                // ???? ???????? ???? ????? ?????? ??????????,
      {                   // ??????????? ??????????? ???
         if (mas > minmas)    // ???? ??? ?????? ?????? minmas,
         {                // ????????? ???
            tecmin = tec[0];
            for (i = 1; i < mas; i++) {
               if (tec[i] < tecmin)
                  tecmin = tec[i];
            }
            I = CalcTECconst(tec,gamma,tecmin,mas);
            tecmin = I - tecmin;

            for (i = 0; i < mas; i++) {
               tec[i] += tecmin;
            }

#if AATR
            tecprev = tec[0];
#endif
            for (i = 0; i < mas; i++)
            {
#if AATR
               phi = cos(gamma[i]*M_PI/180.)*rz/(rz+350.);
               aatr2[i] = (1.-phi*phi)*(tec[i]-tecprev)/30.;
               aatr2[i] *= aatr2[i];
               tecprev = tec[i];
#endif
               phi = asin(cos(gamma[i]*M_PI/180.)*rz/(rz+hmax));
               tec[i] *= cos(phi);
            }
          // ?????????? ?????? ? ????????? ???????
            trelin(mas,tec,highcount);
          // ??????? ????????????? ????
            for (i = 0; i < mas; i++)
               tec[i] = fabs(tec[i]);
            smooth(mas,tec,highcount);

          // ???????? ???????? ??? ?? ???????-????
            fi0 = M_PI/((double)(mas-1));
            for (i = 0; i < mas; i++) {
               sinfi = sin(fi0*(double)i);
               coswin[i] = sinfi*sinfi;
               tec[i] *= coswin[i];
            }
         }
         else             // ???? ??? ?????? minmas,
         {                // ???????? ???
            for (i = 0; i < mas; i++)
            {
               tec[i] = 0.;
               gamma[i] = 0.;
               az[i] = 0.;
               coswin[i] = 0.;
            }
         }
        // ??????? ??????????? ??? ?? ?????
         for (i = 0; i < mas; i++)
         {
#if AATR
            sprintf(buf,"%6.3f %8.3f %8.4f %5.3f %14.10f\n",
                        gamma[i],az[i],tec[i],coswin[i],aatr2[i]*3600.);
#else
            sprintf(buf,"%6.3f %8.3f %8.4f %5.3f\n",
                        gamma[i],az[i],tec[i],coswin[i]);
#endif
            fputs(buf,fout);
         }
         // ??????? ?????? ???????????? ???? mas
         mas = 0;
         // ??????? ????????? ????????? ?? fin ??????? ??????
#if AATR
         sprintf(buf,"%6.3f %8.3f %8.4f %5.3f %14.10f\n",
                      0.,0.,0.,0.,0.);
#else
         sprintf(buf,"%6.3f %8.3f %8.4f %5.3f\n",
                      0.,0.,0.,0.);
#endif
         fputs(buf,fout);
      }
   }
   fclose(fin);
   fclose(fout);

//   free(Moment);

   return 1;
}
//---------------------------------------------------------------------------
int smooth(int m, float r[], int ms)
//---------------------------------------------------------------------------
// ????????? ??????????? ???? R ??????? ??????????? ????????.
//  (??????? ?? MS ?????? ????????????? ???????????? ???????? ????)
//
//  ???????? ??????????:
//     R  - ???????????? ??????
//     M  - ?????????? ???????  (<=5000)
//     MS - ????? ?????, ?? ??????? ???????????? ??????????? (????) (>2)
//
//  ?C?O????EM?E ?O??PO?PAMM?:
//     ???
//
//  ?P?ME?AH??:
//     ???
//---------------------------------------------------------------------------
{
   int i, j, mh, me, mz, je, jb;
   float rs[5000], s;

   if (ms > m || ms < 1)
      return 0;
   if (ms % 2 == 0) ms--;
   if (ms == 1)
      return 0;

   mh = (ms - 1)/2;
   me = m - mh;

// ??????????? ?????? ???? ?? MS/2
// (1-? ????? ?? ????????; 2-? ???????? ?? ???? ??????;
// 3-? - ?? ???? ? ?.?.)
   for (i = 0; i < mh; i++)
   {
      s = 0.;
      je = 2*i + 1;
      for (j = 0; j < je; j++)
         s += r[j];
      rs[i] = s/je;
   }

// ??????????? ????????? ???? ?? MS/2 ?? M-MS/2
// (????? ??????????? ???????? ?? MS ??????)
   for (i = mh; i < me; i++)
   {
      s = 0.;
      jb = i - mh;
      je = i + mh;
      for (j = jb; j <= je; j++)
         s += r[j];
      rs[i] = s/ms;
   }

// ??????????? ????? ???? ????? M-MS/2
// (R(M) ?? ????????; R(M-1) ???????? ?? ???? ??????;
// R(M-2) - ?? ???? ? ?.?.)
   for (i = me; i < m; i++)
   {
      s = 0.;
      jb = 2*i - m + 1;
      mz = 2*(m - i) - 1;
      for (j = jb; j < m; j++)
         s += r[j];
      rs[i] = s/mz;
   }

   for (i = 0; i < m; i++)
      r[i] = rs[i];
   return 1;
}
//---------------------------------------------------------------------------
int trelin(int n, float r[], int ms)
//---------------------------------------------------------------------------
// ????????? ???????? ????????? ?????? ???? R ??????? ??????????? ????????
//
//  ???????? ??????????:
//     R  - ???????????? ??????
//     RS - ??????????????? ??????
//     OR - ?????? ? ????????? ???????
//     N  - ?????????? ???????  (<5000)
//     MS - ????? ?????, ?? ??????? ???????????? ??????????? (????) (>2)
//
//  ?C?O????EM?E ?O??PO?PAMM?:
//     SMOOTH
//
//  ?P?ME?AH??:
//     ???
//---------------------------------------------------------------------------
{
   int i;
   float rs[5000];

   for (i = 0; i < n; i++)
      rs[i] = r[i];
   if (smooth(n,rs,ms) == 0)
      return 0;
   for (i = 0; i < n; i++)
      r[i] = r[i] - rs[i];
   return 1;
}
//---------------------------------------------------------------------------
int readdia(char* waydia, char* datway, int* crit_all, char* site,
            int* year, int* daybeg, int* dayend, float* hmax, float* highper,
            float* gamcutoff, int* prncutoff, int* GNSS_crit, int* GrossDir,
            int *NofDirs)
//            , int* PolynomTrend, int* PrintBerngData)
{
   FILE *dia;
   char buf[256];
   int i, krit;

   dia = fopen(waydia, "rt");
// ??????? ???? ? dat-??????
    fgets(buf, 255, dia);
    i = -1;
    while (buf[++i] != ' ' && buf[i] != '\n');
    if (buf[i-1] != DIRSEPCHAR) {
       buf[i] = DIRSEPCHAR;
       buf[i+1] = '\0';
    }
    else
       buf[i] = '\0';
    sprintf( datway,"%s",buf);
// ???????? crit_all
    fgets(buf, 255, dia);
    sscanf(buf, "%d", crit_all);
// ??? ???????
    krit = 0;
    fgets(buf, 255, dia);
    for (i=0; i<4; i++)
    {
       if (buf[i] == ' ' || buf[i] == '\n' || buf[i] == '\0')
          krit = 1;
    }
    if (krit)
       return 0;
    buf[4] = '\0';
    sprintf(site,"%s",buf);
// ???
    fgets(buf, 255, dia);
    sscanf(buf, "%d", year);
// ????????? ????
    fgets(buf, 255, dia);
    sscanf(buf, "%d", daybeg);
// ???????? ????
    fgets(buf, 255, dia);
    sscanf(buf, "%d", dayend);

// ?????? ????????? ??. ????????????
    fgets(buf, 255, dia);
    sscanf(buf, "%f", hmax);
// ?????? ???????? ?????? ?????????? ???????
    fgets(buf, 255, dia);
    sscanf(buf, "%f", highper);

//  ??????????? ???? ?????
    fgets(buf, 255, dia);
    sscanf(buf, "%f", gamcutoff);
//  ???????????? ????? ????????? ??? ?????????
    fgets(buf, 255, dia);
    sscanf(buf, "%d", prncutoff);
//  ???????? ?????? ????????? gps_only
    fgets(buf, 255, dia);
    sscanf(buf, "%d", GNSS_crit);
//  "???????" ???????????
    fgets(buf, 255, dia);
    sscanf(buf, "%d", GrossDir);
//  ???-?? ??????????? ??? ?????????
    fgets(buf, 255, dia);
    sscanf(buf, "%d", NofDirs);

   fclose(dia);

   return 1;
}
//---------------------------------------------------------------------------
int ReadDat30sec(char *way2dat, float gamma[], float az[], float tec[],
                 float *silat, float *silon, float LatRange[], float LonRange[])
//---------------------------------------------------------------------------
// ????????? ?????????? dat-?????? ???? ???????????? ?????.
// ????????? ??????? ???????? 3 ???????? ??????? ?????? ? ????? 30 ??????:
//    - ???? ????? (gamma)
//    - ?????? (az)
//    - ??? (tec)
// ???? ??????????? ???? ????? ????????? ??? ?????? 30 ?????? - ?? ?????
// ??????????? ?????? ??????? ??????? 30 ????????.
//---------------------------------------------------------------------------
{
   FILE *fdat;
   char buf[1000], *p;
   double doubtec;
   float gamcur, azcur, teccur, work;
   int startj, endj, step, kstep, kstep30, seccur, endcount = 2879, secn,
       sampling;
   int i, j, NumOfDateColumns, poryadok[2][4], max_index;
//fprintf(stderr,"berng: %s\n",way2dat);
// ????????? dat-????, ??????? ???????? ?????????? 0-??
   if ((fdat = fopen(way2dat, "rt")) == NULL)  // ????????? dat-????
      return 0;

   fgets(buf,1000,fdat);  // ??????? 1-? ?????? ?????

   if (buf[0] == '#') { // ??????? 1-? ?????? ? 1-? ??????
     // ???? ??? ???????? ???? ????????? tec-suite

      for (i = 0; i < 3; i++)
         fgets(buf,1000,fdat);  // ?????????? ?????? Sources ? Satellite
      p = buf + 11;
      sscanf(p,"%d", &step); // ?? 4-? ?????? ??????? Interval

      fgets(buf,1000,fdat);  // ??????? 5-? ?????? "?????"
      if (!strncmp(buf,"# Sampling",10)) // ???? ??? Sampling interval
      {
         p = buf + 21;
         if (!sscanf(p,"%d",&sampling)) // ???? ? Sampling ?? ?????
            sampling = step;
         if (sampling < step) // ???? Sampling interval ??????, ??? Interval
            sampling = step;
         fgets(buf,1000,fdat);  // ? ?????????? 6-? ?????? "?????"
      } else
         sampling = step;

      fgets(buf,1000,fdat);
      p = buf + 21;      // ????????? ??????? ? ?????? ???????
      sscanf(p,"%f, %f",silon,silat);

      for (i = 0; i < 2; i++)
         fgets(buf,1000,fdat);  // ?????????? ?????? ? ???????????? X,Y,Z

      i = 19;                   // ????????? -
      NumOfDateColumns = 1;     // ??????? ???????, ??????????? ?????????,
      while (buf[++i] != '\n')  // ???????????? ???? ? ?????
         if (buf[i] == ' ')
            NumOfDateColumns++;

      fgets(buf,1000,fdat);  // ??????? ?????? ?????????? ? ?????
      j = GetListOfParams(buf,11,poryadok,NumOfDateColumns);

      fgets(buf,1000,fdat);  // ? ?????????? ?????? ? ????????????? ????????
   }
   else
   {
      fclose(fdat);
      printf("Format error in %s!!!\n\n", way2dat);
      return -2;
   }

// ???????? ?? ?????? ??????????, ??????????????? ?????? ??????
   if (j != 4) // ???? ? ?????? ?????????? ? "?????" ??? ???? ??????, ?? ?????
   {
      fclose(fdat);
      printf("Lack of data in %s (%d)\n",way2dat,j);
      return -2;
   }
// ???????? ?? ??? ?? ???????
   if (sampling > 30 || sampling < 1)
   {
      fclose(fdat);
      return -2;  // ???? ??? ?????? 30 ??? ??? ?????? 1 ???, ?? ?????!!!
   }

// ???????? ?? ????????? ?????? ??????? ? ???????? ???????-????????? ????????
   if (*silon < 0.) *silon += 360.;
   if (LonRange[1] < LonRange[0]) { // ???? ??????? ????????? ???????? "?????????"
      if ((*silon > LonRange[1] && *silon < LonRange[0]) ||
          (*silat < LatRange[0] || *silat > LatRange[1]))
      {
         fclose(fdat);
         return -1;
      }
   }
   else {  // ???? ?????????? ????????? ????????
      if ((*silon < LonRange[0] || *silon > LonRange[1]) ||
          (*silat < LatRange[0] || *silat > LatRange[1]))
      {
         fclose(fdat);
         return -1;
      }
   }

   j = 0;
   for (i=0; i<4; i++)
      if (poryadok[0][i] > j) {
         j = poryadok[0][i];
         max_index = i;
      }

   kstep = sampling/step;
   kstep30 = 30/sampling;


   seccur = -1;
// ???? ?? ????? ?????, ????? ?????? ??????
   while (fgets(buf,1000,fdat) != NULL)  // ?????? ??????
   {
      j = ScanBuf(buf,poryadok,&secn,&gamcur,&azcur,&doubtec,max_index);
      secn /= kstep;
      if (j != 4)
      {
         fclose(fdat);
         printf("Format error in %s!!!\n\n", way2dat);
         return -2;
      }
      work = doubtec/1000.;     // ?????????, ?? ????? ?? ????????
      doubtec -= 1000.*(int)(work);    // ??? ?? ??????? float
      teccur = (float)doubtec;

// ?????? ???????, ????????? ???????? ?? ?????? ??????? 30-???????????
      if (secn % kstep30 == 0)
      {
         secn /= kstep30; // ?????????????? ??????? ? 30-??????????
         seccur++;
        // ??????? ????????? ?? ??? ???????
         if (secn == seccur) // ????????? ??????
         {
            gamma[secn] = gamcur;
            az[secn]    = azcur;
            tec[secn]   = teccur;
         }
         else                 // ???????????? ??????
         {
            for (j = seccur; j < secn; j++)
            {
               gamma[j] = 0.;
               az[j]    = 0.;
               tec[j]   = 0.;
            }
            seccur = secn;
            gamma[seccur] = gamcur;
            az[seccur]    = azcur;
            tec[seccur]   = teccur;
         }
      }
   }
   fclose(fdat);

// ???????? ??????? ?? ????????? ???????
   seccur++;
   for (j = seccur; j <= endcount; j++)
   {
      gamma[j] = 0.;
      az[j]    = 0.;
      tec[j]   = 0.;
   }

   return 1;
}
//---------------------------------------------------------------------------
int GetListOfParams(char buf[], int start, int poryadok[][4], int M)
{
   char *p, *params[30];
   int i, j, N = 0, sum_crit;

   for (i=0; i<30; i++)
      params[i] = (char *)malloc(12);

   p = buf + start;
   i = start;
//berng fix:
#ifdef WINDOWS
 while (buf[++i] != '\n')
#else
 while (buf[++i] != '\r')
#endif
  {
      if (buf[i] == ',') { // ???? ????? ???????
         buf[i] = '\0'; // ?????? ?????? ??????? ?????? ????? ??????
         strcpy(params[N++],p);  // ???????? ????????? ???????? ? ??????
         if (strcmp(p,"datetime") == 0) // ???? ???????? - ???????????? datetime
            for (j=1; j<M; j++)         // ???? ??????, ??????? ??????? ????
               strcpy(params[N++],p);   // ?????? ?? ????? ????
         p = buf + i + 2;   // ???????? ????????? ?? ?????????????? ???????
      }                     // (?? ??????? ? ??????)
      if (N+M > 30) // ??????, ????? ?? ??????? ??????? ?? ?????
         break;
   }
//berng  
#ifdef WINDOWS
 if (buf[i] == '\n' ) 
#else
   if (buf[i] == '\n' || buf[i] == '\r')   // ???? ????????? ?? ????? ??????
#endif 
 {  // ???? ????????? ?? ????? ??????
      buf[i] = '\0'; // ??????? ????????? ????????
      strcpy(params[N],p);
      N++;
   }
// ??????? ?????? ????????? ?????????? - ?????????, ???? ?? ??? ???????????
   sum_crit = 0;
// ????, ??? ????????? ????????? - ????????? ??????, ???? ?????, ?????? ? ??? ?? ?????? L1 ? L2
   for (i=0; i<N; i++) {
      j = strlen(params[i]);
      switch (j) {
         case 2:   // el, az
            if (strcmp(params[i],"el") == 0)
            {
               poryadok[0][1] = i;
//               fprintf(stderr,"berng: el found\n");
               sum_crit++;
            }
            if (strcmp(params[i],"az") == 0)
            {
               poryadok[0][2] = i;
//               fprintf(stderr,"berng: az found\n");
               sum_crit++;
            }
            break;
         case 3:   // tsn
            if (strcmp(params[i],"tsn") == 0)
            {
               poryadok[0][0] = i;
//               fprintf(stderr,"berng: tsn found\n");
               sum_crit++;
            }
            break;
         case 5:   // tec.l
            if (strcmp(params[i],"tec.l") == 0)
            {
               poryadok[0][3] = i;
//               fprintf(stderr,"berng: tec.l found\n");
               sum_crit++;
            }
            break;
         case 8:   // tec.l1l2
            if (strcmp(params[i],"tec.l1l2") == 0)
            {
               poryadok[0][3] = i;
//               fprintf(stderr,"berng: tec.l1l2 found\n");
               sum_crit++;
            }
            break;
      }
   }

 // ????? ??????? ScanBuf ??????, ??? ??? ?? ?????? ?????? ?? ????
   poryadok[1][0] = -1;

   for (i=0; i<30; i++)
      free(params[i]);

   return sum_crit;
}
//---------------------------------------------------------------------------
int ScanBuf(char buf[], int poryadok[][4], int* secn, float* el, float* az,
            double* tec, int max_index)
{
   char *p;
   int i, start, N, sum_crit, list[30], END;

   END = strlen(buf); // ??????? ????? ????????? ??????

   if (poryadok[1][0] == -1) // ???? ??? ?????? ?????? ScanBuf ?? ????
   {
      i = -1;
      start = 0;
      N = 0;
      list[0] = 0;
      while (++i != END && buf[i] != '\n') {    // ???? ?? ????? ??????
         if (!start) {   // ???????? ?????? ?????? =0
            if (buf[i] != ' ') // ????? ?????? ??????
               start = 1;
            // ? ???? ?? ????? ?????? ??????, ?? ?????? ???? ?? ????????? ??????
         }
         else {          // ???????? ?????? ?????? =1 - ?? ???? ?????? ??? ????
            if (buf[i] == ' ') {          // ?????? ???????????
               list[++N] = i;  // ???????? ????????? ???????? ? ??????
               start = 0;  // ????????? ????? ????? ??????
            }
            // ???? ?????? ??? ????, ?????? ???? ?? ????????? ??????
         }
         if (N == 29) // ??????, ????? ?? ??????? ??????? ?? ?????
            break;
      }

      if (N < poryadok[0][max_index]) // ???? ? ?????? ?????? ??????, ??? ?????
         return 0;  // ????????, ??? ? ??????? ????????
/*
???????? ????? ? ??????? poryadok[][]:
 - ??????? ?????? ??????? (???????? poryadok[0][i]) - ??? ?????????? ??????
   ??????? ?????????? ? ??????????? ?????? buf[];
 - ?????? ?????? ??????? (???????? poryadok[1][i]) - ??? ?????? ? ?????? buf[],
   ??????? ? ??????? ????? ??? ??????? ????????? ???????.
*/
      poryadok[1][0] = list[poryadok[0][0]];
      poryadok[1][1] = list[poryadok[0][1]];
      poryadok[1][2] = list[poryadok[0][2]];
      poryadok[1][3] = list[poryadok[0][3]];

   }
   else {  // ???? ??? ?? ?????? ??????
     // ????????, ?????? ?? ????? ??????, ????? ???? ?? ?????????? ???????
     // ????????? ????????. ?? ? ??? ????? ????? poryadok[1][max_index], ??
     // ?????????? ???????? ? ?????? ?????? ???? ??? ??????? ?? 2 ??????:
     // +1 - ?????? ??? ????? ? ?????? ????????? ? ????, ? ??? +1, ????? ???
     // ???? ? ?????? ???? ???????. ??? ?? ???? ???????????? ????? ????????? ??
     // ?????? ????? ????????? ??????.
      if (END < poryadok[1][max_index]+2)
         return 0;  // ????????, ??? ? ??????? ????????
   }

// ???? ?? ?????, ?? ?????? ???????. ??????? ?? ? ??????????????? ??????????
   sum_crit = 0;
   p = buf + poryadok[1][0];
   sum_crit += sscanf(p,"%d",secn); // ????????? ??????
   p = buf + poryadok[1][1];
   sum_crit += sscanf(p,"%f",el); // ???? ????? ?? ???????
   p = buf + poryadok[1][2];
   sum_crit += sscanf(p,"%f",az); // ?????? ?? ???????
   p = buf + poryadok[1][3];
   sum_crit += sscanf(p,"%lf",tec); // ???, ???????????? ?? ??????? ??????????

   return sum_crit;
}
//---------------------------------------------------------------------------
int GetPrnData(int NumOfBlock, PrnData **Dat, int *list_prns, int Nprns,
               char *statway)
{
   FILE *fin;
   char way[256], buf[256];
   float gamma, az, tec, trend, coswin;
#if AATR
   float aatr2;
#endif
   long int Shift;
   int i, j, prn;

// ??????? ?????????
   for (j=0; j<Nprns; j++) {
      Shift = NumOfBlock*MAS_SIZE*STRING_SIZE;
      prn = list_prns[j];
      sprintf(way,"%s%03d_filt.dat",statway,prn);
      fin = fopen(way,"rt");
      fseek(fin,Shift,SEEK_SET);
     // ????????? ???? ?????? ?? ????????
      for (i=0; i<MAS_SIZE; i++) {
         fgets(buf, 255, fin);
#if AATR
         sscanf(buf,"%f %f %f %f %f",
                    &gamma,&az,&tec,&coswin,&aatr2);
         Dat[j][i].aatr2 = aatr2;
#else
         sscanf(buf,"%f %f %f %f",
                    &gamma,&az,&tec,&coswin);
#endif
         Dat[j][i].gamma = gamma;
         Dat[j][i].az = az;
         Dat[j][i].tec = tec;
         Dat[j][i].coswin = coswin;
      }
      fclose(fin);
   }

   return 1;
}
//---------------------------------------------------------------------------
void PPCoord(float silat, float silon, float el, float az, float hmax,
             float* X, float* Y)
// ?????? ????????? ?????????????? ????? ? ???????????????? ??????? ?????????
{
   double sila, silo, ele, azi, phi, psi, RE = 6371.;
	double x_cur, y_cur, z_cur, x_gor, y_gor, x0, y0, z0;
	double slat0, clat0, slon0, clon0, latd, lond;

	if (silon > 180.) silon -= 360.;
	sila = (double)silat*M_PI/180.;
	silo = (double)silon*M_PI/180.;
   ele = (double)el*M_PI/180.;
   azi = (double)az*M_PI/180.;

   phi = asin(cos(ele)*RE/(RE+hmax));
   psi = M_PI/2.-ele-phi;
   latd = asin(sin(sila)*cos(psi)+cos(sila)*sin(psi)*cos(azi));
   lond = silo+asin(sin(psi)*sin(azi)/cos(latd));

   if (lond > M_PI) lond -= 2.*M_PI;
   if (lond < -M_PI) lond += 2.*M_PI;

// ?????? ??????????????? ??????????
   clat0 = cos(sila);
   slat0 = sin(sila);
   clon0 = cos(silo);
   slon0 = sin(silo);

// ?????? ?????????. ??????. ????????? ?????? ??????? ????????. ???????:
   x0 = RE*clat0*clon0;
   y0 = RE*clat0*slon0;
   z0 = RE*slat0;

// ?????? ?????????????? ?????????? ?????????:
   x_cur = RE*cos(latd)*cos(lond);
   y_cur = RE*cos(latd)*sin(lond);
   z_cur = RE*sin(latd);

// ??????? ?????????????? ????????? ? ??????????????:
   x_gor = -(x_cur-x0)*slon0 + (y_cur-y0)*clon0;
   y_gor = -(x_cur-x0)*clon0*slat0 - (y_cur-y0)*slon0*slat0 + (z_cur-z0)*clat0;

   *X = (float)x_gor;
   *Y = (float)y_gor;
}
//------------------------------------------------------------------------------
int GetListOfSites(char* statday)
{
   DIR *dir;
   struct dirent *site_ent;
   int i;

   i = -1;
// ??????? ?????????? ???????
   if ((dir = opendir(statday)) == NULL)
      return 0;
   while ((site_ent = readdir(dir)) != NULL)
   {
      if (strlen(site_ent->d_name) == 4)
      {  // ???? ???????? ???????
         Sites[++i] = (char *)calloc(5,sizeof(char));
         strncpy(Sites[i],site_ent->d_name,5);
      }  // ????? ??????? "???? ???????? ???????"
   }
// ????? ???????? ?????????? ???????
   closedir(dir);

   return i+1;
}
//------------------------------------------------------------------------------
float CalcTECconst(float tec0[], float gamma0[], float tecmin, int n)
//------------------------------------------------------------------------------
{
   float rz = 6371., hmax = 300., ele, phi, aver;
   float I, tec[10], vtec[10], coeff[10], W[10], elmax, rms, minrms,
         podstavka, rms_delitel;
   int i, step, itec_minrms, j, itec, itecmax = 100;

  // ???????? ???????? ???? ??? ? ???? ????? ?? 10 ????????
   step = n/10;
   j = step/2;
   elmax = 0.;
   for (i=0; i<10; i++) {
     // ???????? ???????? ??? ???
      tec[i] = tec0[j] - tecmin;
     // ???????????? ??? ???????? ? "????????????" ???
      ele = gamma0[j]*M_PI/180.;
      phi = asin(cos(ele)*rz/(rz+hmax));
      coeff[i] = cos(phi);
     // ??????????????? ???????? ?? ?????? ???? ??????? ?????????? ??? rms
      W[i] = sin(ele);
     // ?????? ?????? ?????????? ???? ?????
      if (W[i] > elmax) {
         elmax = W[i];
      }
      j += step;
   }

   podstavka = 0.;
   rms_delitel = 0.;
   for (i=0; i<10; i++) {
      W[i] = (W[i] + podstavka)/(elmax + podstavka);
      rms_delitel += W[i];
   }

   minrms = 100.;
   for (itec = 0; itec <= itecmax; itec++) {
      aver = 0.;
      for (i=0; i<10; i++) {
         vtec[i] = (tec[i]+(float)itec)*coeff[i];
         aver += vtec[i];
      }
      aver /= 10.;
      rms = 0.;
      for (i=0; i<10; i++)
         rms += (vtec[i]-aver)*(vtec[i]-aver)*W[i];
      rms /= rms_delitel;
      rms = sqrt(rms);
      if (rms < minrms) {
         minrms = rms;
         itec_minrms = itec;
      }
      if (itec_minrms == itecmax)
         itecmax += 10;
   }
   I = (float)itec_minrms;

   return I;
}
//------------------------------------------------------------------------------
int WeightAvRMS(float In[], float S[], int Index[], int N, float *aver,
                float *rms)
// ?????? ??????????? ???????? ? ?.?.?. ??????? In ? ????????? ?? ??????? Index
{
   float tmp, Sum;
   int i;

   if (N <= 0)
   {
      *aver = 0.;
      *rms = 0.;
      return 0;
   }

  // ?????? ????????
   Sum = 0.;
   *aver = 0.;
   for (i=0; i<N; i++)
   {
      *aver += In[Index[i]];
      Sum += S[Index[i]];
   }

   if (Sum <= 0.)
   {
      *aver = 0.;
      *rms = 0.;
      return 0;
   }
   *aver /= Sum;


  // ?????? ?.?.?.
   *rms = 0.;
   for (i=0; i<N; i++)
   {
      tmp = In[Index[i]] - *aver;
      *rms += tmp*tmp;
   }
   *rms = sqrt(*rms/(float)N);

   return 0;
}
//------------------------------------------------------------------------------
int RangeAvRMS(float X[], float Y[], int Index[], int N, float *X_av, float *Y_av, float *DR)
// ?????? ??????? ???????? ????????? X_av ? Y_av ? ?????? "?????????" ????????
// DR ??? ??????? ???????? ? ????????? ?? Index[]
{
   float tmp1, tmp2;
   int i;

   if (N <= 0)
   {
      *X_av = 0.;
      *Y_av = 0.;
      *DR = 0.;
      return 0;
   }

  // ?????? ????????
   *X_av = 0.;
   *Y_av = 0.;
   for (i=0; i<N; i++)
   {
      *X_av += X[Index[i]];
      *Y_av += Y[Index[i]];
   }
   *X_av /= (float)N;
   *Y_av /= (float)N;

  // ?????? ?.?.?.
   *DR = 0.;
   for (i=0; i<N; i++)
   {
      tmp1 = X[Index[i]] - *X_av;
      tmp2 = Y[Index[i]] - *Y_av;
      *DR += tmp1*tmp1 + tmp2*tmp2;
   }
   *DR = sqrt(*DR/(float)N);

   return 0;
}
//------------------------------------------------------------------------------
int DerivaStat(char *statout, int *list_prns, int Nprns, char *site, int year)
{
   FILE *fin;
   char wayin[40], buf[100];
   int dI_dist[2000], d2I_dist[2000], N_dist = 0, N_cut;
   double gamma, az, tec, dI, d2I, dI_step, d2I_step;
   int i, j, i1, i2;

//  ????????????? ???????? ????????????? ???????????
   for (i=0; i<2000; i++) {
      dI_dist[i] = 0;
      d2I_dist[i] = 0;
   }

   dI_step = (double)max_dI/2000.;
   d2I_step = (double)max_d2I/2000.;

// ??????? ???? ?????? ? ???????????? ?? ??????? ? ????? ?????????????
   for (i=0; i<Nprns; i++) {

      sprintf(wayin,"%s%03d.dat",statout,list_prns[i]);
      fin = fopen(wayin,"rt");

      j = 0;
      while (fgets(buf,99,fin) != NULL) {
         sscanf(buf,"%lf %lf %lf %lf %lf",&gamma,&az,&tec,&dI,&d2I);
         j++; // ????????? ??????

         if (d2I < d2I_step/100.) {
//            d2I = 0.;
            continue;
         }
         if (gamma < 0.0001)
            continue;

         i1 = (int)(dI/dI_step);
         i2 = (int)(d2I/d2I_step);

         if (i1 > 1999)
            i1 = 1999;
         if (i2 > 1999)
            i2 = 1999;

         dI_dist[i1]++;
         d2I_dist[i2]++;
         N_dist++;
      }

      fclose(fin);
   }
   N_cut = (int)((float)N_dist*percent/100.);

// ???? ????????? ???????? ?? ?????? ???????????
   for (i = j = 0; j < N_cut; j += dI_dist[i++]);
   P_dI = (float)((double)i*dI_step);

// ???? ????????? ???????? ?? ?????? ???????????
   for (i = j = 0; j < N_cut; j += d2I_dist[i++]);
   P_d2I = (float)((double)i*d2I_step);

// ?????? ????????????? ? ?????????? ????????? ???????? ? ?????
   sprintf(buf,"%s%s_dI_dists_%04d.dat",statout,site,year);
   fin = fopen(buf,"wt");
   fputs("dIdt dI_dist d2Idt2 d2I_dist\n",fin);
   fprintf(fin," %f  1  P_dI\n",P_dI);
   fprintf(fin,"%f  1  P_d2I\n",P_d2I);

   for (i=0; i<2000; i++) {
      fprintf(fin,"%f %d %f %d\n",(float)i*dI_step,dI_dist[i],
                                  (float)i*d2I_step,d2I_dist[i]);
   }

   fclose(fin);


   return 1;
}
//------------------------------------------------------------------------------
int GetSiteInfo()
{
   FILE *f;
   char buf[25], *p;
   int i, n = 0;

   p = buf + 5;
   f = fopen("siteinfo.dat", "rt");
  // ??????? ?????????? ?????
   while (fgets(buf,24,f) != NULL)
      n++;
   rewind(f);
  // ????????? ?????? ??? ?????? ???????? ? ??????? ??????? ? ????????
   SiteInfo = (Site_Info*)calloc(n, sizeof(Site_Info));
   if (SiteInfo == NULL) {
      printf("GetSiteInfo: Can not allocate memory\n");
      return 0;
   }
   i = -1;
   while (fgets(buf,24,f) != NULL)
   {
      *(p-1) = '\0';
      sprintf(SiteInfo[++i].site,"%s",buf);
      sscanf(p,"%f",&SiteInfo[i].cutoff);
   }

   fclose(f);

   return i+1;
}
//------------------------------------------------------------------------------

